<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Blog on Tomodachi94's Musings</title><link>https://tomodachi94.github.io/blog/</link><description>Recent content in Blog on Tomodachi94's Musings</description><generator>Hugo</generator><language>en-us</language><copyright>Copyright Â© 2023, Tomodachi94. All Rights Reserved unless explicitly stated.</copyright><lastBuildDate>Tue, 11 Feb 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://tomodachi94.github.io/blog/index.xml" rel="self" type="application/rss+xml"/><item><title>grsecurity in Nixpkgs: an obituary (or: what was 'paxmark'?)</title><link>https://tomodachi94.github.io/blog/grsecurity-nixpkgs-paxmark/</link><pubDate>Tue, 11 Feb 2025 00:00:00 +0000</pubDate><guid>https://tomodachi94.github.io/blog/grsecurity-nixpkgs-paxmark/</guid><description>&lt;p>This post aims to provide a bunch of historical background around &lt;a href="https://pax.grsecurity.net/">PaX&lt;/a> and &lt;a href="https://grsecurity.net">grsecurity&lt;/a> support in Nixpkgs.
It is fairly abstract and can probably be digested by non-Nix people with ease.&lt;/p>
&lt;p>This post is mostly focused on the implementation in Nixpkgs; I am not an expect in PaX/grsecurity (so if I&amp;rsquo;ve gotten something wrong, please correct me).&lt;/p>
&lt;p>I&amp;rsquo;m also partially writing this so that people know what paxmark was, in case they encounter a reference to it.&lt;/p></description></item><item><title>Unit testing with ComputerCraft, McFly, and CraftOS-PC</title><link>https://tomodachi94.github.io/blog/computercraft-mcfly-testing/</link><pubDate>Sun, 09 Feb 2025 00:00:00 +0000</pubDate><guid>https://tomodachi94.github.io/blog/computercraft-mcfly-testing/</guid><description>&lt;p>&lt;a href="https://www.howtogeek.com/devops/what-is-unit-testing-and-why-is-it-important/">Unit testing is awesome&lt;/a>.
It helps you catch bugs early by ensuring all of the components of your program work as expected.&lt;/p>
&lt;p>&lt;strong>Note: This guide is targeted towards &lt;em>experts&lt;/em> who have advanced knowledge of ComputerCraft and know a few things about unit tests.&lt;/strong>
Experience with unit tests in another language is helpful too, but isn&amp;rsquo;t required.&lt;/p>
&lt;p>&lt;a href="https://computercraft.cc">CC: Tweaked&lt;/a> contains a little-known unit testing framework called &lt;strong>McFly&lt;/strong>, which describes itself as &amp;ldquo;a very basic test framework for ComputerCraft&amp;rdquo; drawing inspiration from the &lt;a href="https://lunarmodules.github.io/busted/">Busted&lt;/a> framework for Lua.
This post will function as an introduction to McFly, in the process providing instructions for running the tests inside of the &lt;a href="https://craftos-pc.cc">CraftOS-PC emulator&lt;/a>, suitable for running in a continuous integration pipeline.&lt;/p></description></item><item><title>My Obsidian System: PANoRAMA</title><link>https://tomodachi94.github.io/blog/panorama-obsidian/</link><pubDate>Tue, 03 Oct 2023 21:18:14 +0000</pubDate><guid>https://tomodachi94.github.io/blog/panorama-obsidian/</guid><description>&lt;p>Hello! This is an abstract walkthrough of my PKM system that I use with Obsidian and Zotero.
This is largely a mash-up of different systems, designed to fit &lt;em>my&lt;/em> needs.&lt;/p>
&lt;h2 id="the-name">The name&lt;/h2>
&lt;p>In my mind, the system doesn&amp;rsquo;t have a name, but I needed to name it &lt;em>something&lt;/em> for this post, so I&amp;rsquo;ve decided on &lt;strong>PANoRAMA&lt;/strong>.&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>&lt;/p>
&lt;p>Here&amp;rsquo;s the folders:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>P&lt;/strong>rojects: Short-term efforts with a specific final outcome. &lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>&lt;/li>
&lt;li>&lt;strong>A&lt;/strong>reas: Long-term commitments requiring management in order to uphold a standard. &lt;sup id="fnref1:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>&lt;/li>
&lt;li>&lt;strong>No&lt;/strong>tes: Long-term &amp;lsquo;main&amp;rsquo; notes, to be used in my writing. &lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>&lt;/li>
&lt;li>&lt;strong>R&lt;/strong>eferences: Notes taken during the act of reading. &lt;sup id="fnref1:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>&lt;/li>
&lt;li>&lt;strong>A&lt;/strong>rchive: Projects which are complete, irrelevant or obsolete areas, and fully processed reference notes. &lt;sup id="fnref2:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>&lt;/li>
&lt;li>&lt;strong>M&lt;/strong>eta: Templates mostly. I needed a place for this kind of stuff, and &amp;lsquo;meta&amp;rsquo; sounded rather nice at the time.&lt;/li>
&lt;li>&lt;strong>A&lt;/strong>ttachments: Images and diagrams used in any of the folders listed above.&lt;/li>
&lt;/ul>
&lt;p>Yes, this is a lot of folders, and each of them has a specific purpose and were only made after I determined a need for its existence.&lt;/p></description></item><item><title>Setting up a development environment with Neovim and ComputerCraft</title><link>https://tomodachi94.github.io/blog/computercraft-neovim/</link><pubDate>Tue, 04 Jul 2023 21:57:13 -0700</pubDate><guid>https://tomodachi94.github.io/blog/computercraft-neovim/</guid><description>&lt;p>&lt;a href="https://tweaked.cc">ComputerCraft&lt;/a> is a Minecraft mod that adds programmable computers to the game. These computers are programmed with &lt;a href="https://lua.org">Lua&lt;/a>, a scripting language written in C.&lt;/p>
&lt;p>&lt;a href="https://neovim.io">Neovim&lt;/a> is a fork of the &lt;a href="https://www.vim.org">Vim&lt;/a> text editor; it adds configuration with Lua and language server support, among other things, to the classic Vim editor.&lt;/p>
&lt;p>In this guide, I&amp;rsquo;ll be walking you through setting up a tolerable IDE-like environment for ComputerCraft in Neovim, similar to Visual Studio Code&amp;rsquo;s IntelliSense.&lt;/p></description></item><item><title>Nix quickstart guide</title><link>https://tomodachi94.github.io/blog/nix-quickstart/</link><pubDate>Mon, 17 Apr 2023 00:00:00 +0000</pubDate><guid>https://tomodachi94.github.io/blog/nix-quickstart/</guid><description>&lt;p>This guide helps you start quickly with using Nix as a package manager. This guide covers setting up, &lt;code>nix-shell&lt;/code>, &lt;code>nix-env -iA&lt;/code>, and Home Manager.&lt;/p>
&lt;p>Here&amp;rsquo;s a quick way to get started with using Nix as a &lt;em>package manager&lt;/em> without diving into the complex internals:&lt;/p>
&lt;ul>
&lt;li>Install Nix with &lt;code>sh &amp;lt;(curl -L https://nixos.org/nix/install) --daemon&lt;/code>. Make sure to add that snippet at the end to your shell configuration or you&amp;rsquo;ll have some trouble later.&lt;/li>
&lt;li>Run &lt;code>nix-channel --update&lt;/code>. This is pretty much the same as &lt;code>apt-get update&lt;/code>.&lt;/li>
&lt;li>Run &lt;code>nix-shell -p cowsay&lt;/code>. This downloads &lt;code>cowsay&lt;/code> into your &lt;em>Nix Store&lt;/em> (at &lt;code>/nix/store&lt;/code>) and then modifies your &lt;code>$PATH&lt;/code> and other variables to make it executable in your shell. Run &lt;code>cowsay 'Hello Nix!'&lt;/code> to test it out; it should behave the same.&lt;/li>
&lt;li>Run &lt;code>nix-env -iA pkgs.cowsay&lt;/code> to add &lt;code>cowsay&lt;/code> into your path permanently. I don&amp;rsquo;t recommend this method if you use more than a few packages; see later bullet points about Home Manager.&lt;/li>
&lt;li>Side note, if you want to search all of the packages in Nixpkgs, you can use the wonderful interface at &lt;a href="https://search.nixos.org">https://search.nixos.org&lt;/a>. Make sure to select to &lt;code>unstable&lt;/code> channel in the switcher below the search bar.&lt;/li>
&lt;/ul>
&lt;p>This is pretty much all you need to use Nix, but there are much better ways to ensure packages are installed and automatically put on &lt;code>$PATH&lt;/code>. Out of the solutions, I still prefer &lt;a href="https://github.com/nix-community/home-manager">Home Manager&lt;/a> (abbreviated to HM).&lt;/p></description></item><item><title>Editing Fandom wikis with Neovim</title><link>https://tomodachi94.github.io/blog/fandom-neovim/</link><pubDate>Sun, 16 Oct 2022 00:00:00 +0000</pubDate><guid>https://tomodachi94.github.io/blog/fandom-neovim/</guid><description>&lt;p>&lt;em>This guide assumes you know how to insert text, move the cursor, and execute commands in Neovim.&lt;/em>&lt;/p>
&lt;p>&lt;a href="https://neovim.io">Neovim&lt;/a> is a text editor based on &lt;a href="https://www.vim.org">Vim&lt;/a>.
It is extremely extensible, and we&amp;rsquo;ll be taking advantage of that to edit on Fandom wikis.&lt;/p>
&lt;p>Install Neovim (but Vim should also work for this guide). It might already be on your Linux computer.
You will also need an installation of Python, and a library called &lt;code>mwclient&lt;/code> from &lt;code>pip&lt;/code>, as well as a plugin manager. I chose Vim-Plug.&lt;/p></description></item><item><title>How I Transcribe Handwritten Notes Into Obsidian</title><link>https://tomodachi94.github.io/blog/handwritten-notes/</link><pubDate>Mon, 17 Jan 2022 00:00:00 +0000</pubDate><guid>https://tomodachi94.github.io/blog/handwritten-notes/</guid><description>&lt;p>&lt;a href="https://obsidian.md">Obsidian&lt;/a> is a Markdown-based note taking tool focused on connections between notes. Today, I&amp;rsquo;ll show you how I transcribe my handwritten &lt;a href="https://en.wikipedia.org/wiki/Cornell_Notes">Cornell notes&lt;/a> into a linkable web of thought.&lt;/p>
&lt;p>&lt;em>Related: &lt;a href="https://www.psychologytoday.com/us/blog/creative-leadership/201902/why-you-should-take-notes-hand">Why You Should Take Notes By Hand&lt;/a>&lt;/em>&lt;/p>
&lt;p>&lt;img src="./cnotes_example.png" alt="The layout of notes taken using the Cornell Method.">&lt;/p>
&lt;p>&lt;em>Image courtesy of Icez~enwikibooks at English Wikibooks, Public domain, via Wikimedia Commons&lt;/em>&lt;/p>
&lt;p>I first begin by creating a scratch note, similar to a &lt;a href="https://publish.obsidian.md/hub/05+-+Concepts/Maps+of+Content+(MOC)">map of content&lt;/a> (MOC). It&amp;rsquo;s temporary, but it can be evolved into a MOC if you want, or just deleted when done.&lt;/p></description></item></channel></rss>