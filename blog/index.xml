<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Blog on Tomodachi94's Musings</title><link>https://tomodachi94.github.io/blog/</link><description>Recent content in Blog on Tomodachi94's Musings</description><generator>Hugo</generator><language>en-us</language><copyright>Copyright Â© 2023, Tomodachi94. All Rights Reserved unless explicitly stated.</copyright><lastBuildDate>Tue, 11 Feb 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://tomodachi94.github.io/blog/index.xml" rel="self" type="application/rss+xml"/><item><title>grsecurity in Nixpkgs: an obituary (or: what was 'paxmark'?)</title><link>https://tomodachi94.github.io/blog/grsecurity-nixpkgs-paxmark/</link><pubDate>Tue, 11 Feb 2025 00:00:00 +0000</pubDate><guid>https://tomodachi94.github.io/blog/grsecurity-nixpkgs-paxmark/</guid><description>&lt;p&gt;This post aims to provide a bunch of historical background around &lt;a href="https://pax.grsecurity.net/"&gt;PaX&lt;/a&gt; and &lt;a href="https://grsecurity.net"&gt;grsecurity&lt;/a&gt; support in Nixpkgs.
It is fairly abstract and can probably be digested by non-Nix people with ease.&lt;/p&gt;
&lt;p&gt;This post is mostly focused on the implementation in Nixpkgs; I am not an expect in PaX/grsecurity (so if I&amp;rsquo;ve gotten something wrong, please correct me).&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m also partially writing this so that people know what paxmark was, in case they encounter a reference to it.&lt;/p&gt;</description></item><item><title>Unit testing with ComputerCraft, McFly, and CraftOS-PC</title><link>https://tomodachi94.github.io/blog/computercraft-mcfly-testing/</link><pubDate>Sun, 09 Feb 2025 00:00:00 +0000</pubDate><guid>https://tomodachi94.github.io/blog/computercraft-mcfly-testing/</guid><description>&lt;p&gt;&lt;a href="https://www.howtogeek.com/devops/what-is-unit-testing-and-why-is-it-important/"&gt;Unit testing is awesome&lt;/a&gt;.
It helps you catch bugs early by ensuring all of the components of your program work as expected.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note: This guide is targeted towards &lt;em&gt;experts&lt;/em&gt; who have advanced knowledge of ComputerCraft and know a few things about unit tests.&lt;/strong&gt;
Experience with unit tests in another language is helpful too, but isn&amp;rsquo;t required.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://computercraft.cc"&gt;CC: Tweaked&lt;/a&gt; contains a little-known unit testing framework called &lt;strong&gt;McFly&lt;/strong&gt;, which describes itself as &amp;ldquo;a very basic test framework for ComputerCraft&amp;rdquo; drawing inspiration from the &lt;a href="https://lunarmodules.github.io/busted/"&gt;Busted&lt;/a&gt; framework for Lua.
This post will function as an introduction to McFly, in the process providing instructions for running the tests inside of the &lt;a href="https://craftos-pc.cc"&gt;CraftOS-PC emulator&lt;/a&gt;, suitable for running in a continuous integration pipeline.&lt;/p&gt;</description></item><item><title>My Obsidian System: PANoRAMA</title><link>https://tomodachi94.github.io/blog/panorama-obsidian/</link><pubDate>Tue, 03 Oct 2023 21:18:14 +0000</pubDate><guid>https://tomodachi94.github.io/blog/panorama-obsidian/</guid><description>&lt;p&gt;&lt;strong&gt;Note 4 August 2025: I have since abandoned this system. I may or may not write another piece once I have solidified a new system. I would also like to expand on the &amp;ldquo;Please take inspiration, but don&amp;rsquo;t use this&amp;rdquo; section at a later date.&lt;/strong&gt; I am leaving this up mostly for posterity.**&lt;/p&gt;
&lt;p&gt;Hello! This is an abstract walkthrough of my PKM system that I use with Obsidian and Zotero.
This is largely a mash-up of different systems, designed to fit &lt;em&gt;my&lt;/em&gt; needs.&lt;/p&gt;</description></item><item><title>Setting up a development environment with Neovim and ComputerCraft</title><link>https://tomodachi94.github.io/blog/computercraft-neovim/</link><pubDate>Tue, 04 Jul 2023 21:57:13 -0700</pubDate><guid>https://tomodachi94.github.io/blog/computercraft-neovim/</guid><description>&lt;p&gt;&lt;a href="https://tweaked.cc"&gt;ComputerCraft&lt;/a&gt; is a Minecraft mod that adds programmable computers to the game. These computers are programmed with &lt;a href="https://lua.org"&gt;Lua&lt;/a&gt;, a scripting language written in C.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://neovim.io"&gt;Neovim&lt;/a&gt; is a fork of the &lt;a href="https://www.vim.org"&gt;Vim&lt;/a&gt; text editor; it adds configuration with Lua and language server support, among other things, to the classic Vim editor.&lt;/p&gt;
&lt;p&gt;In this guide, I&amp;rsquo;ll be walking you through setting up a tolerable IDE-like environment for ComputerCraft in Neovim, similar to Visual Studio Code&amp;rsquo;s IntelliSense.&lt;/p&gt;</description></item><item><title>Nix quickstart guide</title><link>https://tomodachi94.github.io/blog/nix-quickstart/</link><pubDate>Mon, 17 Apr 2023 00:00:00 +0000</pubDate><guid>https://tomodachi94.github.io/blog/nix-quickstart/</guid><description>&lt;p&gt;This guide helps you start quickly with using Nix as a package manager. This guide covers setting up, &lt;code&gt;nix-shell&lt;/code&gt;, &lt;code&gt;nix-env -iA&lt;/code&gt;, and Home Manager.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s a quick way to get started with using Nix as a &lt;em&gt;package manager&lt;/em&gt; without diving into the complex internals:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Install Nix with &lt;code&gt;sh &amp;lt;(curl -L https://nixos.org/nix/install) --daemon&lt;/code&gt;. Make sure to add that snippet at the end to your shell configuration or you&amp;rsquo;ll have some trouble later.&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;nix-channel --update&lt;/code&gt;. This is pretty much the same as &lt;code&gt;apt-get update&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;nix-shell -p cowsay&lt;/code&gt;. This downloads &lt;code&gt;cowsay&lt;/code&gt; into your &lt;em&gt;Nix Store&lt;/em&gt; (at &lt;code&gt;/nix/store&lt;/code&gt;) and then modifies your &lt;code&gt;$PATH&lt;/code&gt; and other variables to make it executable in your shell. Run &lt;code&gt;cowsay 'Hello Nix!'&lt;/code&gt; to test it out; it should behave the same.&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;nix-env -iA pkgs.cowsay&lt;/code&gt; to add &lt;code&gt;cowsay&lt;/code&gt; into your path permanently. I don&amp;rsquo;t recommend this method if you use more than a few packages; see later bullet points about Home Manager.&lt;/li&gt;
&lt;li&gt;Side note, if you want to search all of the packages in Nixpkgs, you can use the wonderful interface at &lt;a href="https://search.nixos.org"&gt;https://search.nixos.org&lt;/a&gt;. Make sure to select to &lt;code&gt;unstable&lt;/code&gt; channel in the switcher below the search bar.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is pretty much all you need to use Nix, but there are much better ways to ensure packages are installed and automatically put on &lt;code&gt;$PATH&lt;/code&gt;. Out of the solutions, I still prefer &lt;a href="https://github.com/nix-community/home-manager"&gt;Home Manager&lt;/a&gt; (abbreviated to HM).&lt;/p&gt;</description></item><item><title>Editing Fandom wikis with Neovim</title><link>https://tomodachi94.github.io/blog/fandom-neovim/</link><pubDate>Sun, 16 Oct 2022 00:00:00 +0000</pubDate><guid>https://tomodachi94.github.io/blog/fandom-neovim/</guid><description>&lt;p&gt;&lt;em&gt;This guide assumes you know how to insert text, move the cursor, and execute commands in Neovim.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://neovim.io"&gt;Neovim&lt;/a&gt; is a text editor based on &lt;a href="https://www.vim.org"&gt;Vim&lt;/a&gt;.
It is extremely extensible, and we&amp;rsquo;ll be taking advantage of that to edit on Fandom wikis.&lt;/p&gt;
&lt;p&gt;Install Neovim (but Vim should also work for this guide). It might already be on your Linux computer.
You will also need an installation of Python, and a library called &lt;code&gt;mwclient&lt;/code&gt; from &lt;code&gt;pip&lt;/code&gt;, as well as a plugin manager. I chose Vim-Plug.&lt;/p&gt;</description></item><item><title>How I Transcribe Handwritten Notes Into Obsidian</title><link>https://tomodachi94.github.io/blog/handwritten-notes/</link><pubDate>Mon, 17 Jan 2022 00:00:00 +0000</pubDate><guid>https://tomodachi94.github.io/blog/handwritten-notes/</guid><description>&lt;p&gt;&lt;a href="https://obsidian.md"&gt;Obsidian&lt;/a&gt; is a Markdown-based note taking tool focused on connections between notes. Today, I&amp;rsquo;ll show you how I transcribe my handwritten &lt;a href="https://en.wikipedia.org/wiki/Cornell_Notes"&gt;Cornell notes&lt;/a&gt; into a linkable web of thought.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Related: &lt;a href="https://www.psychologytoday.com/us/blog/creative-leadership/201902/why-you-should-take-notes-hand"&gt;Why You Should Take Notes By Hand&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="./cnotes_example.png" alt="The layout of notes taken using the Cornell Method."&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Image courtesy of Icez~enwikibooks at English Wikibooks, Public domain, via Wikimedia Commons&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I first begin by creating a scratch note, similar to a &lt;a href="https://publish.obsidian.md/hub/05+-+Concepts/Maps+of+Content+(MOC)"&gt;map of content&lt;/a&gt; (MOC). It&amp;rsquo;s temporary, but it can be evolved into a MOC if you want, or just deleted when done.&lt;/p&gt;</description></item></channel></rss>