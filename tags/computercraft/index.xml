<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ComputerCraft on Tomodachi94's Musings</title><link>https://tomodachi94.github.io/tags/computercraft/</link><description>Recent content in ComputerCraft on Tomodachi94's Musings</description><generator>Hugo</generator><language>en-us</language><copyright>Copyright Â© 2023, Tomodachi94. All Rights Reserved unless explicitly stated.</copyright><lastBuildDate>Sun, 09 Feb 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://tomodachi94.github.io/tags/computercraft/index.xml" rel="self" type="application/rss+xml"/><item><title>Unit testing with ComputerCraft, McFly, and CraftOS-PC</title><link>https://tomodachi94.github.io/blog/computercraft-mcfly-testing/</link><pubDate>Sun, 09 Feb 2025 00:00:00 +0000</pubDate><guid>https://tomodachi94.github.io/blog/computercraft-mcfly-testing/</guid><description>&lt;p>&lt;a href="https://www.howtogeek.com/devops/what-is-unit-testing-and-why-is-it-important/">Unit testing is awesome&lt;/a>.
It helps you catch bugs early by ensuring all of the components of your program work as expected.&lt;/p>
&lt;p>&lt;strong>Note: This guide is targeted towards &lt;em>experts&lt;/em> who have advanced knowledge of ComputerCraft and know a few things about unit tests.&lt;/strong>
Experience with unit tests in another language is helpful too, but isn&amp;rsquo;t required.&lt;/p>
&lt;p>&lt;a href="https://computercraft.cc">CC: Tweaked&lt;/a> contains a little-known unit testing framework called &lt;strong>McFly&lt;/strong>, which describes itself as &amp;ldquo;a very basic test framework for ComputerCraft&amp;rdquo; drawing inspiration from the &lt;a href="https://lunarmodules.github.io/busted/">Busted&lt;/a> framework for Lua.
This post will function as an introduction to McFly, in the process providing instructions for running the tests inside of the &lt;a href="https://craftos-pc.cc">CraftOS-PC emulator&lt;/a>, suitable for running in a continuous integration pipeline.&lt;/p></description></item><item><title>Setting up a development environment with Neovim and ComputerCraft</title><link>https://tomodachi94.github.io/blog/computercraft-neovim/</link><pubDate>Tue, 04 Jul 2023 21:57:13 -0700</pubDate><guid>https://tomodachi94.github.io/blog/computercraft-neovim/</guid><description>&lt;p>&lt;a href="https://tweaked.cc">ComputerCraft&lt;/a> is a Minecraft mod that adds programmable computers to the game. These computers are programmed with &lt;a href="https://lua.org">Lua&lt;/a>, a scripting language written in C.&lt;/p>
&lt;p>&lt;a href="https://neovim.io">Neovim&lt;/a> is a fork of the &lt;a href="https://www.vim.org">Vim&lt;/a> text editor; it adds configuration with Lua and language server support, among other things, to the classic Vim editor.&lt;/p>
&lt;p>In this guide, I&amp;rsquo;ll be walking you through setting up a tolerable IDE-like environment for ComputerCraft in Neovim, similar to Visual Studio Code&amp;rsquo;s IntelliSense.&lt;/p></description></item></channel></rss>