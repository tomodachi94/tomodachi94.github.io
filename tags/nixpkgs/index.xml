<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Nixpkgs on Tomodachi94's Musings</title><link>https://tomodachi94.github.io/tags/nixpkgs/</link><description>Recent content in Nixpkgs on Tomodachi94's Musings</description><generator>Hugo</generator><language>en-us</language><copyright>Copyright Â© 2023, Tomodachi94. All Rights Reserved unless explicitly stated.</copyright><lastBuildDate>Tue, 11 Feb 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://tomodachi94.github.io/tags/nixpkgs/index.xml" rel="self" type="application/rss+xml"/><item><title>grsecurity in Nixpkgs: an obituary (or: what was 'paxmark'?)</title><link>https://tomodachi94.github.io/blog/grsecurity-nixpkgs-paxmark/</link><pubDate>Tue, 11 Feb 2025 00:00:00 +0000</pubDate><guid>https://tomodachi94.github.io/blog/grsecurity-nixpkgs-paxmark/</guid><description>&lt;p>This post aims to provide a bunch of historical background around &lt;a href="https://pax.grsecurity.net/">PaX&lt;/a> and &lt;a href="https://grsecurity.net">grsecurity&lt;/a> support in Nixpkgs.
It is fairly abstract and can probably be digested by non-Nix people with ease.&lt;/p>
&lt;p>This post is mostly focused on the implementation in Nixpkgs; I am not an expect in PaX/grsecurity (so if I&amp;rsquo;ve gotten something wrong, please correct me).&lt;/p>
&lt;p>I&amp;rsquo;m also partially writing this so that people know what paxmark was, in case they encounter a reference to it.&lt;/p></description></item><item><title>Nix quickstart guide</title><link>https://tomodachi94.github.io/blog/nix-quickstart/</link><pubDate>Mon, 17 Apr 2023 00:00:00 +0000</pubDate><guid>https://tomodachi94.github.io/blog/nix-quickstart/</guid><description>&lt;p>This guide helps you start quickly with using Nix as a package manager. This guide covers setting up, &lt;code>nix-shell&lt;/code>, &lt;code>nix-env -iA&lt;/code>, and Home Manager.&lt;/p>
&lt;p>Here&amp;rsquo;s a quick way to get started with using Nix as a &lt;em>package manager&lt;/em> without diving into the complex internals:&lt;/p>
&lt;ul>
&lt;li>Install Nix with &lt;code>sh &amp;lt;(curl -L https://nixos.org/nix/install) --daemon&lt;/code>. Make sure to add that snippet at the end to your shell configuration or you&amp;rsquo;ll have some trouble later.&lt;/li>
&lt;li>Run &lt;code>nix-channel --update&lt;/code>. This is pretty much the same as &lt;code>apt-get update&lt;/code>.&lt;/li>
&lt;li>Run &lt;code>nix-shell -p cowsay&lt;/code>. This downloads &lt;code>cowsay&lt;/code> into your &lt;em>Nix Store&lt;/em> (at &lt;code>/nix/store&lt;/code>) and then modifies your &lt;code>$PATH&lt;/code> and other variables to make it executable in your shell. Run &lt;code>cowsay 'Hello Nix!'&lt;/code> to test it out; it should behave the same.&lt;/li>
&lt;li>Run &lt;code>nix-env -iA pkgs.cowsay&lt;/code> to add &lt;code>cowsay&lt;/code> into your path permanently. I don&amp;rsquo;t recommend this method if you use more than a few packages; see later bullet points about Home Manager.&lt;/li>
&lt;li>Side note, if you want to search all of the packages in Nixpkgs, you can use the wonderful interface at &lt;a href="https://search.nixos.org">https://search.nixos.org&lt;/a>. Make sure to select to &lt;code>unstable&lt;/code> channel in the switcher below the search bar.&lt;/li>
&lt;/ul>
&lt;p>This is pretty much all you need to use Nix, but there are much better ways to ensure packages are installed and automatically put on &lt;code>$PATH&lt;/code>. Out of the solutions, I still prefer &lt;a href="https://github.com/nix-community/home-manager">Home Manager&lt;/a> (abbreviated to HM).&lt;/p></description></item></channel></rss>